/* Copyright (c) 2016, The Linux Foundation. All rights reserved.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 */

#ifndef IPQ4019_ADSS_H
#define IPQ4019_ADSS_H

/* ADSS AUDIO Registers */

#define ADSS_BASE	0x7700000
#define ADSS_RANGE	0x20000

/* ADSS_AUDIO_LOCAL_REG Registers */

#define ADSS_GLB_PCM_MBOX_CTRL_REG		0x0C

#define ADSS_GLB_CHIP_CTRL_I2S_REG		0x10
#define GLB_CHIP_CTRL_I2S_INTERFACE_EN		BIT(0)

#define ADSS_GLB_I2S_RST_REG		0x14
#define GLB_I2S_RST_CTRL_MBOX0		BIT(0)
#define GLB_I2S_RST_CTRL_I2S0		BIT(1)
#define GLB_I2S_RST_CTRL_MBOX3		BIT(2)
#define GLB_I2S_RESET_VAL		0xF

#define ADSS_GLB_CLK_I2S_CTRL_REG	0x18
#define GLB_CLK_I2S_CTRL_TX_BCLK_OE	BIT(28)
#define GLB_CLK_I2S_CTRL_RX_BCLK_OE	BIT(27)
#define GLB_CLK_I2S_CTRL_RX_MCLK_OE	BIT(16)
#define GLB_CLK_I2S_CTRL_TX_MCLK_OE	BIT(17)

#define ADSS_GLB_AUDIO_MODE_REG		0x30
#define GLB_AUDIO_MODE_RECV_MASK	BIT(2)
#define GLB_AUDIO_MODE_XMIT_MASK	BIT(0)
#define GLB_AUDIO_MODE_RECV_I2S		(0 << 2)
#define GLB_AUDIO_MODE_RECV_TDM		BIT(2)
#define GLB_AUDIO_MODE_XMIT_I2S		(0 << 0)
#define GLB_AUDIO_MODE_XMIT_TDM		BIT(0)
#define GLB_AUDIO_MODE_I2S0_TXD_OE	(7 << 4)
#define GLB_AUDIO_MODE_I2S0_FS_OE	BIT(7)
#define GLB_AUDIO_MODE_I2S3_FS_OE	BIT(8)
#define GLB_AUDIO_MODE_I2S3_RXD_OE	BIT(9)
#define GLB_AUDIO_MODE_B1K		BIT(28)

#define ADSS_MBOX_STEREO_AUDIO_BASE		(ADSS_BASE + 0x8000)

/* ADSS_MBOX_STEREO_AUDIO_BASE + 0x0 */
#define ADSS_MBOX0_AUDIO_BASE				0x0
#define ADSS_MBOX1_AUDIO_BASE				0x2000
#define ADSS_MBOX2_AUDIO_BASE				0x4000
#define ADSS_MBOX3_AUDIO_BASE				0x6000

#define ADSS_MBOXn_MBOX_FIFO0_REG			0x0
#define MBOX_FIFO_RESET_TX_INIT				BIT(0)
#define MBOX_FIFO_RESET_RX_INIT				BIT(2)

#define ADSS_MBOXn_MBOX_FIFO_STATUS0_REG		0x08

#define ADSS_MBOXn_MBOX_DMA_POLICY_REG			0x10
#define MBOX_DMA_POLICY_SW_RESET			BIT(31)
#define MBOX_DMA_POLICY_TX_INT_TYPE			BIT(17)
#define MBOX_DMA_POLICY_RX_INT_TYPE			BIT(16)
#define MBOX_DMA_POLICY_RXD_16BIT_SWAP			BIT(10)
#define MBOX_DMA_POLICY_RXD_END_SWAP			BIT(8)
#define ADSS_MBOX_DMA_POLICY_SRAM_AC(x)		((((x) >> 28) & 0xf) << 12)
#define ADSS_MBOX_DMA_POLICY_TX_FIFO_THRESHOLD(x)	((((x) & 0xf) << 4))

#define ADSS_MBOXn_MBOXn_DMA_RX_DESCRIPTOR_BASE_REG	0x18

#define ADSS_MBOXn_MBOXn_DMA_RX_CONTROL_REG		0x1C
#define ADSS_MBOXn_DMA_RX_CONTROL_STOP			BIT(0)
#define ADSS_MBOXn_DMA_RX_CONTROL_START			BIT(1)
#define ADSS_MBOXn_DMA_RX_CONTROL_RESUME		BIT(2)

#define ADSS_MBOXn_MBOXn_DMA_TX_DESCRIPTOR_BASE_REG	0x20

#define ADSS_MBOXn_MBOXn_DMA_TX_CONTROL_REG		0x24
#define ADSS_MBOXn_DMA_TX_CONTROL_STOP			BIT(0)
#define ADSS_MBOXn_DMA_TX_CONTROL_START			BIT(1)
#define ADSS_MBOXn_DMA_TX_CONTROL_RESUME		BIT(2)

#define ADSS_MBOXn_MBOX_FRAME_REG			0x38
#define ADSS_MBOXn_FIFO_TIMEOUT_REG			0x40

#define ADSS_MBOXn_MBOX_INT_STATUS_REG			0x44
#define MBOX_INT_STATUS_TX_DMA_COMPLETE			BIT(6)
#define MBOX_INT_STATUS_RX_DMA_COMPLETE			BIT(10)

#define ADSS_MBOXn_MBOX_INT_ENABLE_REG			0x4C
#define MBOX_INT_ENABLE_RX_DMA_COMPLETE			BIT(10)
#define MBOX_INT_STATUS_RX_UNDERFLOW			BIT(4)
#define MBOX_INT_STATUS_RX_FIFO_UNDERFLOW		BIT(12)
#define MBOX_INT_ENABLE_TX_DMA_COMPLETE			BIT(6)
#define MBOX_INT_STATUS_TX_OVERFLOW			BIT(5)
#define MBOX_INT_STATUS_TX_FIFO_OVERFLOW		BIT(13)

#define ADSS_MBOXn_MBOX_FIFO_RESET_REG			0x58
#define MBOX_FIFO_RESET_TX_INIT				BIT(0)
#define MBOX_FIFO_RESET_RX_INIT				BIT(2)

#define ADSS_MBOXn_MBOX_DEBUG_CHAIN0_REG		0x60
#define ADSS_MBOXn_MBOX_DEBUG_CHAIN1_REG		0x64
#define ADSS_MBOXn_MBOX_DEBUG_CHAIN0_SIGNALS_REG	0x68
#define ADSS_MBOXn_MBOX_DEBUG_CHAIN1_SIGNALS_REG	0x6C

/* ADSS_STEREO0_AUDIO_STEREO_REG Registers */

#define ADSS_STEREO0_AUDIO_BASE		0x9000
#define ADSS_STEREO1_AUDIO_BASE		0xB000
#define ADSS_STEREO2_AUDIO_BASE		0xD000
#define ADSS_STEREO3_AUDIO_BASE		0xF000

#define STEREO0_OFFSET			0x0
#define STEREO1_OFFSET			0x2000
#define STEREO2_OFFSET			0x4000
#define STEREO3_OFFSET			0x6000

#define ADSS_STEREOn_STEREO0_CONFIG_REG			0x0
#define STEREOn_CONFIG_MIC_SWAP				BIT(24)
#define STEREOn_CONFIG_SPDIF_ENABLE			BIT(23)
#define STEREOn_CONFIG_ENABLE				BIT(21)
#define STEREOn_CONFIG_MIC_RESET			BIT(20)
#define STEREOn_CONFIG_RESET				BIT(19)
#define STEREOn_CONFIG_I2S_DELAY			(0 << 18)
#define STEREOn_CONFIG_PCM_SWAP				BIT(17)
#define STEREOn_CONFIG_MIC_WORD_SIZE_32			BIT(16)
#define STEREOn_CONFIG_MIC_WORD_SIZE_16			(0 << 16)
#define STEREOn_CONFIG_STEREO_MODE			(0 << 14)
#define STEREOn_CONFIG_MONO_MODE			BIT(14)
#define STEREOn_CONFIG_STEREO_MONO_MASK			(3 << 14)
#define STEREOn_CONFIG_DATA_WORD_SIZE(x)		((x) << 12)
#define STEREOn_CONFIG_DATA_WORD_SIZE_MASK		(3 << 12)
#define STEREOn_CONFIG_I2S_WORD_SIZE_32			BIT(11)
#define STEREOn_CONFIG_I2S_WORD_SIZE_16			(0 << 11)
#define STEREOn_CONFIG_MCK_SEL				BIT(10)
#define STEREOn_CONFIG_SAMPLE_CNT_CLEAR_TYPE		BIT(9)
#define STEREOn_CONFIG_MASTER				BIT(8)

#define MAX_STEREO_ENTRIES	4
#define TDM_SYNC_NUM		2
#define TDM_DELAY		0
#define MCLK_MULTI		4

/* I2S Parameters */
#define IPQ4019_I2S_NO_OF_PERIODS	(130)
#define IPQ4019_I2S_PERIOD_BYTES_MIN	ALIGN(4032, L1_CACHE_BYTES)
#define IPQ4019_I2S_BUFF_SIZE		(IPQ4019_I2S_PERIOD_BYTES_MIN * \
						IPQ4019_I2S_NO_OF_PERIODS)
#define IPQ4019_I2S_CAPTURE_BUFF_SIZE	(IPQ4019_I2S_PERIOD_BYTES_MIN * \
						IPQ4019_I2S_NO_OF_PERIODS)

/* TDM Parameters */
#define IPQ4019_TDM_NO_OF_PERIODS	(260)
#define IPQ4019_TDM_PERIOD_BYTES_MIN	ALIGN(4032, L1_CACHE_BYTES)
#define IPQ4019_TDM_BUFF_SIZE		(IPQ4019_TDM_PERIOD_BYTES_MIN * \
						IPQ4019_TDM_NO_OF_PERIODS)
#define IPQ4019_TDM_CAPTURE_BUFF_SIZE	(IPQ4019_TDM_PERIOD_BYTES_MIN * \
						IPQ4019_TDM_NO_OF_PERIODS)

/* Enumerations */

enum intf {
	I2S,
	TDM,
	SPDIF,
	I2S1,
	I2S2,
	MAX_INTF
};

enum dir {
	PLAYBACK,
	CAPTURE
};

enum cfg {
	DISABLE,
	ENABLE
};

/* Supported Channels */
enum channels {
	CH_STEREO = 2,
	CH_3_1 = 4,
	CH_5_1 = 6,
	CH_7_1 = 8
};

enum ipq4019_samp_freq {
	FREQ_8000 = 8000,
	FREQ_11025 = 11025,
	FREQ_16000 = 16000,
	FREQ_22050 = 22050,
	FREQ_32000 = 32000,
	FREQ_44100 = 44100,
	FREQ_48000 = 48000,
	FREQ_64000 = 64000,
	FREQ_88200 = 88200,
	FREQ_96000 = 96000,
	FREQ_176400 = 176400,
	FREQ_192000 = 192000,
};

#define RATE_16000_96000 \
		(SNDRV_PCM_RATE_16000 | SNDRV_PCM_RATE_22050 |\
		SNDRV_PCM_RATE_32000 | SNDRV_PCM_RATE_44100 |\
		SNDRV_PCM_RATE_48000 | SNDRV_PCM_RATE_64000 |\
		SNDRV_PCM_RATE_88200 | SNDRV_PCM_RATE_96000)

enum stereo_ch {
	STEREO0,
	STEREO1,
	STEREO2,
	STEREO3
};

enum bit_width {
	__BIT_8 = 8,
	__BIT_16 = 16,
	__BIT_24 = 24,
	__BIT_32 = 32,
	__BIT_INVAL = -1
};

/* ADSS APIs */
extern void ipq4019_glb_audio_mode(int mode, int dir);
extern void ipq4019_glb_tx_data_port_en(u32 enable);
extern void ipq4019_glb_rx_data_port_en(u32 enable);
extern void ipq4019_glb_tx_framesync_port_en(u32 enable);
extern void ipq4019_glb_rx_framesync_port_en(u32 enable);
extern void ipq4019_glb_clk_enable_oe(u32 dir);
/* Stereo APIs */
extern void ipq4019_stereo_config_reset(u32 stereo_offset);
extern void ipq4019_stereo_config_mic_reset(u32 reset, u32 stereo_offset);
extern void ipq4019_stereo_config_enable(u32 enable, u32 stereo_offset);
extern int ipq4019_cfg_bit_width(u32 bit_width, u32 stereo_offset);
extern void ipq4019_config_stereo_mode(u32 mode, u32 stereo_offset);
extern void ipq4019_config_master(u32 enable, u32 stereo_offset);
extern void ipq4019_config_mclk_sel(u32 stereo_offset, u32 val);
extern void ipq4019_config_sample_cnt_clear_type(u32 stereo_offset);

/* APIs in DAI driver */
extern int ipq4019_get_mbox_id(struct snd_pcm_substream *substream, int intf);
extern int ipq4019_get_stereo_id(struct snd_pcm_substream *substream,
								int intf);
#endif
